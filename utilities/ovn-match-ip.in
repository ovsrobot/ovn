#!/bin/bash
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

IPCALC_WILDCARD_RET=

ipcalc_wildcard () {
    ip=`echo $1 | awk -F '/' '{print $1}'`
    ip_list=${ip//./ }
    read -a ip_array <<< ${ip_list}
    mask=`echo $1 | awk -F '/' '{print $2}'`
    mask_list=${mask//./ }
    read -a mask_array <<< ${mask_list}
    ip_0=$((${ip_array[0]} & ${mask_array[0]}))
    ip_1=$((${ip_array[1]} & ${mask_array[1]}))
    ip_2=$((${ip_array[2]} & ${mask_array[2]}))
    ip_3=$((${ip_array[3]} & ${mask_array[3]}))
    IPCALC_WILDCARD_RET="$ip_0.$ip_1.$ip_2.$ip_3"
}

for arg
do
    case $arg in
        -h | --help)
            cat <<EOF
$0: A tool that can match ip wildcard mask similar to grep
usage: $0 ip
Search for ip/mask that can be matched in standard input.
Example: echo ip 192.168.1.0/24 | $0 192.168.1.1
Result: ip 192.168.1.0/24

You might use this: ovs-ofctl dump-flows br-int | $0 192.168.1.1
EOF
            exit 0
            ;;
    esac
done

while read line
do
    ip=`echo $line | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'`
    if test "$ip" == "$1"; then
        echo $line | grep --color $1
        continue
    fi

    ip_mask=`echo $line | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'`
    if test "$ip_mask" != ""; then
        ipcalc_wildcard $ip_mask
        ip_mask_ret=$IPCALC_WILDCARD_RET
        match_ip_mask=`echo $ip_mask | sed 's/.*\//'$1'\//'`
        ipcalc_wildcard $match_ip_mask
        match_ip_mask_ret=$IPCALC_WILDCARD_RET
        if test $ip_mask_ret == $match_ip_mask_ret; then
            echo $line | grep --color $ip_mask
        fi
        continue
    fi

    ip_prefix=`echo $line | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+'`
    if test "$ip_prefix" != ""; then
        match_ip_prefix=`echo $ip_prefix | sed 's/.*\//'$1'\//'`
        if test `ipcalc -n $match_ip_prefix` == `ipcalc -n $ip_prefix`; then
            echo $line | grep --color $ip_prefix
        fi
        continue
    fi
done
