AT_COPYRIGHT([Copyright (c) 2023 Red Hat, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at:

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.])

m4_include([tests/system-userspace-macros.at])


# OVS_DPDK_PRE_CHECK()
#
# Check prerequisites for DPDK tests. Following settings are checked:
#  - Hugepages
#
m4_define([OVS_DPDK_PRE_CHECK],
  [dnl Check Hugepages
   AT_CHECK([cat /proc/meminfo], [], [stdout])
   AT_SKIP_IF([grep -E 'HugePages_Free: *0' stdout], [], [stdout])
   AT_CHECK([mount], [], [stdout])
   AT_CHECK([grep 'hugetlbfs' stdout], [], [stdout], [])
])

m4_define([SYSTEM_DPDK_ALLOWED_LOGS],[
])

# OVS_TRAFFIC_VSWITCHD_START([vsctl-args], [vsctl-output], [=override])
#
# Creates a database and starts ovsdb-server, starts ovs-vswitchd
# connected to that database, calls ovs-vsctl to create a bridge named
# br0 with predictable settings, passing 'vsctl-args' as additional
# commands to ovs-vsctl.  If 'vsctl-args' causes ovs-vsctl to provide
# output (e.g. because it includes "create" commands) then 'vsctl-output'
# specifies the expected output after filtering through uuidfilt.
m4_define([OVS_TRAFFIC_VSWITCHD_START],
  [OVS_DPDK_PRE_CHECK()
   OVS_WAIT_WHILE([ip link show ovs-netdev])
   _OVS_VSWITCHD_START([--disable-system],
                       [-- set Open_vSwitch . other_config:dpdk-init=true other_config:dpdk-extra="--log-level=pmd.*:error --no-pci"])
   dnl Add bridges, ports, etc.
   OVS_WAIT_WHILE([ip link show br0])
   AT_CHECK([ovs-vsctl -- _ADD_BR([br0]) -- $1 m4_if([$2], [], [], [| uuidfilt])], [0], [$2])

   if test OVN_MONITOR_ALL = yes; then
        ovs-vsctl set open . external_ids:ovn-monitor-all=true
   fi
])

# OVS_TRAFFIC_VSWITCHD_STOP([WHITELIST], [extra_cmds])
#
# Gracefully stops ovs-vswitchd and ovsdb-server, checking their log files
# for messages with severity WARN or higher and signaling an error if any
# is present.  The optional WHITELIST may contain shell-quoted "sed"
# commands to delete any warnings that are actually expected, e.g.:
#
#   OVS_TRAFFIC_VSWITCHD_STOP(["/expected error/d"])
#
# 'extra_cmds' are shell commands to be executed afte OVS_VSWITCHD_STOP() is
# invoked. They can be used to perform additional cleanups such as name space
# removal.
m4_define([OVS_TRAFFIC_VSWITCHD_STOP],
  [OVS_VSWITCHD_STOP([dnl
$1";/EAL: No \(available\|free\) .*hugepages reported/d
/EAL: eal_memalloc_alloc_seg_bulk(): couldn't find suitable memseg_list/d
/TELEMETRY: No legacy callbacks, legacy socket not created/d
/dpif(revalidator.*)|WARN|netdev@ovs-netdev: failed to.*proto=2.*/d
/dpif_netdev(revalidator.*)|ERR|internal error parsing flow key.*proto=2.*/d
/dpif_netlink.*Generic Netlink family 'ovs_datapath' does not exist. The Open vSwitch kernel module is probably not loaded./d
/eth_dev_tap_create():  Disabling rte flow support: No such file or directory/d
/eth_dev_tap_create(): .*: failed to create multiq qdisc./d
/netdev_linux.*obtaining netdev stats via vport failed/d
/qdisc_create_multiq(): Could not add multiq qdisc (2): No such file or directory/d
/tap_mp_req_on_rxtx(): Failed to send start req to secondary/d
/tap_nl_dump_ext_ack(): Specified qdisc kind is unknown/d"])
   AT_CHECK([:; $2])
])

# ADD_VETH([port], [namespace], [ovs-br], [ip_addr] [mac_addr], [gateway],
#          [ip_addr_flags] [ip6_addr] [gateway6])
#
# Fake a veth by creating a tap on kernel side and plug it in OVS using the
# net/tap DPDK driver.
#
m4_define([ADD_VETH],
  [AT_CHECK([ovs-vsctl add-port $3 ovs-$1 -- \
             set interface ovs-$1 external-ids:iface-id="$1" -- \
             set interface ovs-$1 type=dpdk -- \
             set interface ovs-$1 options:n_rxq=2 -- \
             set interface ovs-$1 options:dpdk-devargs=net_tap$1,iface=$1])
   OVS_WAIT_UNTIL([ip link show dev $1 | grep -qw LOWER_UP])
   AT_CHECK([ip link set $1 netns $2])
   NS_CHECK_EXEC([$2], [ip addr add $4 dev $1 $7])
   NS_CHECK_EXEC([$2], [ip link set dev $1 up])
   if test -n "$5"; then
     NS_CHECK_EXEC([$2], [ip link set dev $1 address $5])
   fi
   if test -n "$6"; then
     NS_CHECK_EXEC([$2], [ip route add $6 dev $1])
     NS_CHECK_EXEC([$2], [ip route add default via $6])
   fi
   if test -n "$8"; then
     NS_CHECK_EXEC([$2], [ip addr add $8 dev $1])
   fi
   if test -n "$9"; then
     NS_CHECK_EXEC([$2], [ip route add default via $9])
   fi
])
